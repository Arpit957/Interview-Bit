int find_parent(int node1 ,vector<int>&parent){
    if(parent[node1] == node1){
        return node1;
    }
    return find_parent(parent[node1],parent);
}

void union_them(int node1 ,int node2 ,vector<int>&parent,vector<int>&rank){
    if(rank[node1] < rank[node2]){
        swap(node1,node2);
        // parent[node1] = node2;
        // rank[node2]++;
    }
    // else{
    //     parent[node2] = node1;
    //     rank[node1]++;
    // }
    
    parent[node2] = node1;
    rank[node1] +=rank[node2];
}
int Solution::solve(vector<int> &A, vector<int> &B, vector<vector<int> > &C) {
    int n = A.size();
    
    vector<int>parent(n+1);
    vector<int>rank(n+1,1);
    
    for(int i = 1;i<=n;i++){
        parent[i] = i;
    }
    
    for(int i = 0 ;i < C.size() ;i++){
        int x = find_parent(C[i][0],parent);
        int y = find_parent(C[i][1],parent);
        
        if(x!=y){
            union_them(x,y,parent,rank);
        }
    }
    
    map<int,int>AP,BP;
    for(int i = 0; i <n;i++){
       AP[A[i]] = i+1;
       BP[B[i]] = i+1;
    }
    
    for(int i = 0 ;i < n;i++){
        if(A[i] != B[i]){
            int x = AP[B[i]];
            int y = i + 1;
            
            if(find_parent(x,parent)!=find_parent(y,parent))
            return 0;
        }
    }
    return 1;
}
