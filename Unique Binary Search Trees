/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
    vector<TreeNode*> generate(int st, int ed)
    {
        vector<TreeNode*> v;

        if(st > ed)
        {
            v.push_back(NULL);
            return v;
        }

        if(st == ed)
        {
            v.push_back(new TreeNode(st));
            return v;
        }

        for(auto i=st; i<=ed; i++)
        {
            vector<TreeNode *> lft = generate(st, i-1);
            vector<TreeNode *> rgt = generate(i+1, ed);

            for(auto l : lft)
            {
                for(auto r : rgt)
                {
                    TreeNode *root = new TreeNode(i);

                    root->left = l;
                    root->right = r;

                    v.push_back(root);
                }
            }
        }
        return v;
    }
vector<TreeNode*> Solution::generateTrees(int A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
   if(A == 0)
            return vector<TreeNode*>();
        else 
            return generate(1, A);
}
