int f(int index,int buy, int cap, const vector<int> &A,vector<vector<vector<int>>> &dp){
    if(index==A.size()) // U have exhausted the days of the transaction
    return 0;
    
    if(cap==0) // U have done 2 transactions so u cant do anymore
    return 0;
    
    if(dp[index][buy][cap]!=-1)
       return dp[index][buy][cap];
    
    int profit;
    //If we can allowed to buy then either we buy or we dont buy.
    if(buy)
    profit=max( -A[index]+f(index+1,0,cap,A,dp) , 0+f(index+1,1,cap,A,dp) );
    else
    profit=max( +A[index]+f(index+1,1,cap-1,A,dp), 0+f(index+1,0,cap,A,dp) );
    return dp[index][buy][cap]=profit;
}
 int solve3(const vector<int>& prices){
        int n = prices.size();
      // vector<vector<vector<int> > >dp(n+1,vector<vector<int> >(2,vector<int>(3,0)));  
        vector<vector<int > >curr(2,vector<int>(3,0));
        vector<vector<int > >next(2,vector<int>(3,0));
        
        for(int index = n-1;index>=0;index--){
            for(int buy = 0;buy<=1;buy++){
                for(int limit = 1;limit<=2;limit++){
                    int profit = 0;
    
        
        if(buy){
           int tobuy = -prices[index] + next[0][limit];
            int toskip = 0  + next[1][limit];
            profit = max(tobuy,toskip);
        }
        else{
             int tosell = prices[index] + next[1][limit-1];
            int toskip = 0 + next[0][limit];
            profit = max(tosell,toskip);
        }
         curr[buy][limit]=profit;
                }
            }
            next = curr;
        }
        return next[1][2];
    }
int Solution::maxProfit(const vector<int> &A) {
    int n=A.size();
    //  vector<vector<vector<int>>> dp(n,vector<vector<int>>(2,vector<int>(3,-1)));
    //  return f(0,1,2,A,dp);
//     if(A.empty()) return 0;
// int one_t=0,two_t=0;
// int mp1=INT_MAX, mp2=INT_MAX;
// for(int i : A){
//     mp1 = min(mp1,i);
//     one_t = max(one_t,i-mp1);
//     mp2 = min(mp2,i-one_t);
//     two_t = max(two_t,i-mp2);
// }
// return two_t;
return solve3(A);
}
