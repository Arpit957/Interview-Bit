int Solution::fibsum(int A) {
//     queue<pair<int,int>> q;
//   q.push(make_pair(0,0));
//   int a=1;
//   int b=2;
//   int i=0;
//   vector<int>fib;
//   fib.push_back(1);
//   fib.push_back(2);
// for(;i<=A;){
//     i=a+b;
//     a=b;
//     b=i;
//     fib.push_back(i);      
// }
// if(fib[fib.size()-1]>A)
// fib.pop_back();
// int ret=0;
// vector<bool> vis(A,false);
// while(q.size()!=0)
// {
// // cout<<(q.front().first)<<" “<<” in "<<q.front().second<<endl;
//     if(q.front().first==A){   
//         ret=q.front().second;
//         break;
//     }
//    for(int i=0;i<fib.size();i++){
//         if(vis[fib[i]+q.front().first]==false){
//             q.push(make_pair(fib[i]+q.front().first,q.front().second+1));
//             vis[fib[i]]=true;
//         }
//     }
//      q.pop();
// }
// return ret;

vector<long long> v;
v.push_back(1); v.push_back(1);    
     
 while(v.back() < INT_MAX){       
  int n = v.size();        
 long long t =  v[n-1] + v[n-2];         
v.push_back(t);        
}         
 int ans = 0;    
 int k = A;

while(k!=0){         
    while(v.back() > k){             
    v.pop_back();         
    }                  
k -= v.back();         
ans++;     
}     
return ans;

}
