// /**
//  * Definition for binary tree
//  * struct TreeNode {
//  *     int val;
//  *     TreeNode *left;
//  *     TreeNode *right;
//  *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
//  * };
//  */
//  int find_element(vector<int>&a,int node){
//      for(int i = 0;i<a.size();i++){
//          if(a[i] == node)return i;
//      }
//      return -1;
//  }
//  TreeNode* solve(vector<int> &A, vector<int> &B,int& preorder_index,int inorder_start,int inorder_end){
//     //  int mid = (i + j)/
    
//     //base
//     if(preorder_index >= A.size() or inorder_start > inorder_end)return NULL;

//    int node = A[preorder_index++];
//    TreeNode* root = new TreeNode(node);
   
//    int index_inorder = find_element(B,node);
   
//    //TreeNode* root = new TreeNode(node);
   
//    root ->left = solve(A,B,preorder_index,inorder_start,index_inorder-1);
//    root->right = solve(A,B,preorder_index,index_inorder+1,inorder_end);
   
//     return root;
    
    
//  }
// TreeNode* Solution::buildTree(vector<int> &A, vector<int> &B) {
//     int ind = 0;
//     int mid = B.size()/2;
//     return solve(A,B,ind,0,B.size()-1);
// }
int ind=0;
TreeNode* build(vector <int> &A,vector<int>&B,int s,int e){
int idx=-1;
for(int i=s; i<=e; i++){
if(B[i] == A[ind]){
idx = i;
ind++;
break;
}
}
if(idx==-1)
return NULL;
TreeNode* root = new TreeNode(B[idx]);
root->left = build(A,B,s,idx-1);
root->right = build(A,B,idx+1,e);

return root;

}

TreeNode* Solution::buildTree(vector<int> &A, vector<int> &B) {
ind=0;
return build(A,B,0,B.size()-1);
}
